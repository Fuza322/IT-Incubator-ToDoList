{"version":3,"sources":["features/TodolistsList/Todolist/ProgressBar/ProgressBar.module.scss","components/AddItemForm/AddItemForm.module.scss","features/TodolistsList/Todolist/Task/TaskSettings/DeadlineDate/DeadlineDate.module.scss","features/TodolistsList/Todolist/Task/TaskSettings/PrioritySelect/PrioritySelect.module.scss","features/TodolistsList/Todolist/Task/TaskSettings/CreatedDate/CreatedDate.module.scss","app/PageNotFound/PageNotFound.module.scss","app/App.module.scss","features/Login/Login.module.scss","features/TodolistsList/Todolist/Todolist.module.scss","components/Header/Header.module.scss","features/TodolistsList/Todolist/Task/TaskSettings/TaskSettings.module.scss","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/Todolist/Task/tasks-reducer.ts","app/store.ts","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/TaskSettings/DeadlineDate/DeadlineDate.tsx","features/TodolistsList/Todolist/Task/TaskSettings/PrioritySelect/PrioritySelect.tsx","features/TodolistsList/Todolist/Task/TaskSettings/CreatedDate/CreatedDate.tsx","features/TodolistsList/Todolist/Task/TaskSettings/TaskSettings.tsx","features/TodolistsList/Todolist/Task/Task.tsx","components/AddItemForm/AddItemForm.tsx","features/TodolistsList/Todolist/ProgressBar/ProgressBar.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","assets/images/todolist.png","features/Login/Login.tsx","app/PageNotFound/PageNotFound.tsx","assets/images/primaryLogo.png","components/Header/Header.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","reportWebVitals.ts","index.tsx","features/TodolistsList/Todolist/Task/Task.module.scss","features/TodolistsList/TodolistsList.module.scss"],"names":["module","exports","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","authAPI","data","post","get","delete","todolistsAPI","title","id","put","todolistId","taskId","taskTitile","description","deadline","moment","format","priority","model","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","email","setIsLoggedInAC","value","type","status","isInitialized","addTodolistAC","todolist","changeTodolistTitleAC","changeTodolistEntityStatusAC","setTasksAC","tasks","addTaskAC","task","removeTaskAC","updateTaskAC","changeTaskEntityStatusAC","updateTaskTC","domainModel","getState","a","state","find","t","console","warn","apiModel","startDate","res","resultCode","rootReducer","combineReducers","app","action","map","entityStatus","todoListId","filter","copyState","todolists","forEach","tl","auth","store","createStore","applyMiddleware","thunkMiddleware","window","EditableSpan","React","memo","props","useState","editMode","setEditMode","setTitle","useDispatch","TextField","onChange","e","currentTarget","onBlur","onChangeValue","autoFocus","color","className","editableSpanInputStyle","onDoubleClick","editableSpanTextStyle","DeadlineDate","dateValue","onDateChange","style","taskDeadlineInput","PrioritySelect","priorityTextStyle","margin","taskPriority","onChangePriority","target","name","taskSelect","selected","CreatedDate","date","createdDateText","createdDate","substr","TaskSettings","onTaskDescriptionChangeHandler","useCallback","newValue","changeTaskDescription","onTaskDeadlineChangeHandler","changeTaskDeadline","onTaskPriorityChangeHandler","newPriority","changeTaskPriority","taskSettingsContainer","settingsItemContainer","taskItemHelpText","taskDescriptionEditableSpanInput","itemText","addedDate","Task","settingsShowed","setSettingsShowed","onClickSettingsButton","onRemoveTaskClickHandler","removeTask","onTaskTitleChangeHandler","changeTaskTitle","onTaskStausChangeHandler","changeTaskStatus","checked","Completed","New","taskMainInfo","taskStatusAndTitle","Checkbox","taskCheckbox","taskTitleEditableSpanInput","taskTitle","taskButtonsContainer","IconButton","onClick","taskButton","fontSize","disabled","Delete","AddItemForm","addItem","addItemInputStyle","setError","addItemHandler","trim","addItemContainer","onKeyPress","key","helperText","label","variant","addItemButton","AddBox","ProgressBar","countPercentValue","countCompletedTasks","item","Math","round","isNaN","progressContainer","progressHelpText","circleProgressContainer","percentage","primaryColor","secondaryColor","strokeWidth","width","Todolist","demo","useEffect","items","onAddTaskClickHandler","addTask","onRemoveTodolistClickHandler","removeTodolist","onChangeTodolistTitleClickHandler","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","todolistBlock","todolistContainer","todolistTitleContainer","todolistTitleEditableSpanInput","todolistTitle","todolistDisplay","todolistDeleteButton","todolistInput","todolistFilterContainer","ButtonGroup","buttonGroupContainer","Button","buttonFilter","TodolistsList","useSelector","addTaskTC","removeTaskTC","newTitle","changeStatus","newDescription","newDeadline","addTodolist","addTodolistTC","changeTodolistTitleTC","to","todolistsListBlock","params","particles","data-aos","data-aos-duration","todolistsListInputContainer","todolistsListInput","breakpointCols","default","1300","1000","680","columnClassName","todolistColumnItem","todolistslits","allTodolistTasks","Login","formik","useFormik","initialValues","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","loginContainer","welcomeTextContainer","loginContent","projectContainer","projectImageContainer","backgroundImage","projectImage","projectBody","projectInfo","projectHelpText","projectList","Grid","authContainer","container","handleSubmit","authForm","FormControl","authFormControl","authTextContainer","getFieldProps","touched","authErrorText","FormControlLabel","authRememberMeText","control","authButton","PageNotFound","pageNotFoundBlock","Header","AppBar","position","Toolbar","header","href","linkHeaderLogo","headerLogoContainer","headerLogo","src","headerLogoImg","alt","Typography","headerLogoText","headerDisplay","headerUserInfo","headerUserText","headerEmailText","headerButton","LinearProgress","height","Alert","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","App","mainBlock","exact","path","render","from","top","textAlign","CircularProgress","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f4ce967c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"progressContainer\":\"ProgressBar_progressContainer__2p-Ax\",\"progressHelpText\":\"ProgressBar_progressHelpText__2F9R4\",\"circleProgressContainer\":\"ProgressBar_circleProgressContainer__1sHJw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addItemContainer\":\"AddItemForm_addItemContainer__zbZQJ\",\"addItemButton\":\"AddItemForm_addItemButton__2MYCC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskDeadlineInput\":\"DeadlineDate_taskDeadlineInput__3HHWI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskSelect\":\"PrioritySelect_taskSelect__1C0Nd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"createdDateText\":\"CreatedDate_createdDateText__2wtyM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNotFoundBlock\":\"PageNotFound_pageNotFoundBlock__3GE36\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBlock\":\"App_mainBlock__2gDZs\",\"circularProgressContainer\":\"App_circularProgressContainer__2upVU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__3fp3f\",\"welcomeTextContainer\":\"Login_welcomeTextContainer__1NQRp\",\"loginContent\":\"Login_loginContent__1k766\",\"projectContainer\":\"Login_projectContainer__1pswu\",\"projectImageContainer\":\"Login_projectImageContainer__YsbM9\",\"projectImage\":\"Login_projectImage__UwKKw\",\"projectBody\":\"Login_projectBody__27861\",\"projectInfo\":\"Login_projectInfo__3yY8N\",\"projectHelpText\":\"Login_projectHelpText__1uFUj\",\"projectList\":\"Login_projectList__3Lzwp\",\"authContainer\":\"Login_authContainer__3qB4x\",\"authForm\":\"Login_authForm__pPWox\",\"authFormControl\":\"Login_authFormControl__tMWrE\",\"authTextContainer\":\"Login_authTextContainer__3uaUt\",\"authErrorText\":\"Login_authErrorText__3tE_V\",\"authRememberMeText\":\"Login_authRememberMeText__1z1w0\",\"authButton\":\"Login_authButton__3LoAX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistBlock\":\"Todolist_todolistBlock__2ZShm\",\"todolistContainer\":\"Todolist_todolistContainer__1b8yG\",\"todolistTitleContainer\":\"Todolist_todolistTitleContainer__2HhRU\",\"todolistTitleEditableSpanInput\":\"Todolist_todolistTitleEditableSpanInput__3jI3I\",\"todolistTitle\":\"Todolist_todolistTitle__eHrV0\",\"todolistInput\":\"Todolist_todolistInput__2ls53\",\"todolistDisplay\":\"Todolist_todolistDisplay__2JpC4\",\"todolistDeleteButton\":\"Todolist_todolistDeleteButton__3ctYk\",\"todolistFilterContainer\":\"Todolist_todolistFilterContainer__2mGQt\",\"buttonGroupContainer\":\"Todolist_buttonGroupContainer__1_-pE\",\"buttonFilter\":\"Todolist_buttonFilter__1ghR3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1v9gK\",\"linkHeaderLogo\":\"Header_linkHeaderLogo__1LrhN\",\"headerLogoContainer\":\"Header_headerLogoContainer__2k0SJ\",\"headerLogo\":\"Header_headerLogo__2zsUj\",\"headerLogoImg\":\"Header_headerLogoImg__1w-Q-\",\"headerLogoText\":\"Header_headerLogoText__2A10t\",\"headerDisplay\":\"Header_headerDisplay__2m8St\",\"headerUserInfo\":\"Header_headerUserInfo__KV_Zw\",\"headerUserText\":\"Header_headerUserText__3I-NG\",\"headerEmailText\":\"Header_headerEmailText__1xqrX\",\"headerButton\":\"Header_headerButton__147BZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskSettingsContainer\":\"TaskSettings_taskSettingsContainer__3wTjE\",\"settingsItemContainer\":\"TaskSettings_settingsItemContainer__1MOuE\",\"taskItemHelpText\":\"TaskSettings_taskItemHelpText__2aU9N\",\"itemText\":\"TaskSettings_itemText__1Z9du\",\"taskDescriptionEditableSpanInput\":\"TaskSettings_taskDescriptionEditableSpanInput__i3Ve-\"};","import axios from \"axios\"\r\nimport moment from \"moment\"\r\nimport {RequestStatusType} from \"../app/app-reducer\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"3ed83a1d-a130-403b-a242-5edd6be79968\"\r\n    }\r\n})\r\n\r\n// api\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>>(\"auth/login\", data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeResponceType>>(\"auth/me\")\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(\"auth/login\")\r\n    }\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>(\"todo-lists\")\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>(\"todo-lists\", {title: title})\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`,\r\n            {\r\n                title: taskTitile,\r\n                description: \"Empty description\",\r\n                deadline: moment().format(\"L\"),\r\n                priority: 0\r\n            }\r\n        )\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe?: boolean,\r\n    captcha?: string\r\n}\r\nexport type AuthMeResponceType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hight = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}","import {Dispatch} from \"redux\"\r\nimport {ResponseType} from \"../api/todolists-api\"\r\nimport {setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\"\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<ReturnType<typeof setAppErrorAC> | ReturnType<typeof setAppStatusAC>>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC(\"Some error occurred\"))\r\n    }\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<ReturnType<typeof setAppErrorAC> | ReturnType<typeof setAppStatusAC>>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : \"Some error occurred\"))\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n}\r\n","import {ThunkAction} from \"redux-thunk\"\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\"\r\nimport {AppActionsType, AppRootStateType} from \"../../app/store\"\r\nimport {setAppStatusAC} from \"../../app/app-reducer\"\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\"\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    email: \"\"\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"AUTH/SET-IS-LOGGED-IN\":\r\n            return {...state, isLoggedIn: action.value, email: action.email}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean, email: string) => (\r\n    {type: \"AUTH/SET-IS-LOGGED-IN\", value, email} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType): ThunkAction<void, AppRootStateType, unknown, AppActionsType> =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            const res = await authAPI.login(data)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true, data.email))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        } finally {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        }\r\n    }\r\n\r\nexport const logoutTC = (): ThunkAction<void, AppRootStateType, unknown, AppActionsType> =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            const res = await authAPI.logout()\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false, \"\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        } finally {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        }\r\n    }\r\n\r\n// types\r\nexport type SetIsLoggedInActionType = ReturnType<typeof setIsLoggedInAC>\r\nexport type AuthReducerActionsType = SetIsLoggedInActionType","import {ThunkAction} from \"redux-thunk\"\r\nimport {authAPI} from \"../api/todolists-api\"\r\nimport {AppActionsType, AppRootStateType} from \"./store\"\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\"\r\nimport {handleServerNetworkError} from \"../utils/error-utils\"\r\n\r\nconst initialState: InitialStateType = {\r\n    status: \"idle\",\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-IS-INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized}\r\n        case \"APP/SET-STATUS\":\r\n            return {...state, status: action.status}\r\n        case \"APP/SET-ERROR\":\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setAppIsInitializedAC = (isInitialized: boolean) => (\r\n    {type: \"APP/SET-IS-INITIALIZED\", isInitialized} as const)\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => (\r\n    {type: \"APP/SET-STATUS\", status} as const)\r\n\r\nexport const setAppErrorAC = (error: string | null) => (\r\n    {type: \"APP/SET-ERROR\", error} as const)\r\n\r\n// thunks\r\nexport const initializeAppTC = (): ThunkAction<void, AppRootStateType, unknown, AppActionsType> =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            const res = await authAPI.me()\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true, res.data.data.email))\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        } finally {\r\n            dispatch(setAppIsInitializedAC(true))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        }\r\n    }\r\n\r\n// types\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\nexport type AppReducerActionsType =\r\n    ReturnType<typeof setAppIsInitializedAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n","import {ThunkAction} from \"redux-thunk\"\r\nimport {todolistsAPI, TodolistType} from \"../../api/todolists-api\"\r\nimport {AppActionsType, AppRootStateType} from \"../../app/store\"\r\nimport {RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\"\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\"\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: AppActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"SET-TODOLISTS\":\r\n            return action.todolists.map(tl => ({...tl, filter: \"all\", entityStatus: \"idle\"}))\r\n        case \"ADD-TODOLIST\":\r\n            return [{...action.todolist, filter: \"all\", entityStatus: \"idle\"}, ...state]\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title, entityStatus: \"idle\"} : tl)\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => (\r\n    {type: \"SET-TODOLISTS\", todolists} as const)\r\n\r\nexport const addTodolistAC = (todolist: TodolistType) => (\r\n    {type: \"ADD-TODOLIST\", todolist} as const)\r\n\r\nexport const removeTodolistAC = (id: string) => (\r\n    {type: \"REMOVE-TODOLIST\", id} as const)\r\n\r\nexport const changeTodolistTitleAC = (id: string, title: string) => (\r\n    {type: \"CHANGE-TODOLIST-TITLE\", id, title} as const)\r\n\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => (\r\n    {type: \"CHANGE-TODOLIST-FILTER\", id, filter} as const)\r\n\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => (\r\n    {type: \"CHANGE-TODOLIST-ENTITY-STATUS\", id, status} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = (): ThunkAction<void, AppRootStateType, unknown, AppActionsType> =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            const res = await todolistsAPI.getTodolists()\r\n            dispatch(setTodolistsAC(res.data))\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        } finally {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        }\r\n    }\r\n\r\nexport const addTodolistTC = (title: string): ThunkAction<void, AppRootStateType, unknown, AppActionsType> =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            const res = await todolistsAPI.createTodolist(title)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        } finally {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        }\r\n    }\r\n\r\nexport const removeTodolistTC = (todolistId: string): ThunkAction<void, AppRootStateType, unknown, AppActionsType> =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n            const res = await todolistsAPI.deleteTodolist(todolistId)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodolistAC(todolistId))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        } finally {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        }\r\n    }\r\nexport const changeTodolistTitleTC = (todolistId: string, title: string): ThunkAction<void, AppRootStateType, unknown, AppActionsType> =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n            const res = await todolistsAPI.updateTodolist(todolistId, title)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC(todolistId, title))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        } finally {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        }\r\n    }\r\n\r\n// types\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistsReducerActionsType =\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>","import {ThunkAction} from \"redux-thunk\"\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from \"../../../../api/todolists-api\"\r\nimport {AppActionsType, AppRootStateType} from \"../../../../app/store\"\r\nimport {RequestStatusType, setAppStatusAC} from \"../../../../app/app-reducer\"\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../../../utils/error-utils\"\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: AppActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.todolistId]: action.tasks.map(t => ({...t, entityStatus: \"idle\"}))}\r\n        case \"ADD-TASK\":\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case \"REMOVE-TASK\":\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case \"UPDATE-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case \"CHANGE-TASK-ENTITY-STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(task => task.id === action.taskId ? {\r\n                    ...task,\r\n                    entityStatus: action.status\r\n                } : task)\r\n            }\r\n        case \"SET-TODOLISTS\": {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case \"ADD-TODOLIST\":\r\n            return {...state, [action.todolist.id]: []}\r\n        case \"REMOVE-TODOLIST\":\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => (\r\n    {type: \"SET-TASKS\", tasks, todolistId} as const)\r\n\r\nexport const addTaskAC = (task: TaskType) => (\r\n    {type: \"ADD-TASK\", task} as const)\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => (\r\n    {type: \"REMOVE-TASK\", taskId, todolistId} as const)\r\n\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => (\r\n    {type: \"UPDATE-TASK\", model, todolistId, taskId} as const)\r\n\r\nexport const changeTaskEntityStatusAC = (todolistId: string, taskId: string, status: RequestStatusType) => (\r\n    {type: \"CHANGE-TASK-ENTITY-STATUS\", todolistId, taskId, status} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string): ThunkAction<void, AppRootStateType, unknown, AppActionsType> =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            const res = await todolistsAPI.getTasks(todolistId)\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        } finally {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        }\r\n    }\r\nexport const addTaskTC = (title: string, todolistId: string): ThunkAction<void, AppRootStateType, unknown, AppActionsType> =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            const res = await todolistsAPI.createTask(todolistId, title)\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        } finally {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        }\r\n    }\r\nexport const removeTaskTC = (taskId: string, todolistId: string): ThunkAction<void, AppRootStateType, unknown, AppActionsType> =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            dispatch(changeTaskEntityStatusAC(todolistId, taskId, \"loading\"))\r\n            const res = await todolistsAPI.deleteTask(todolistId, taskId)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n                dispatch(changeTaskEntityStatusAC(todolistId, taskId, \"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        } finally {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        }\r\n    }\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string): ThunkAction<void, AppRootStateType, unknown, AppActionsType> =>\r\n    async (dispatch, getState: () => AppRootStateType) => {\r\n        try {\r\n            const state = getState()\r\n            const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n            if (!task) {\r\n                console.warn(\"task not found in the state\")\r\n                return\r\n            }\r\n            const apiModel: UpdateTaskModelType = {\r\n                deadline: task.deadline,\r\n                description: task.description,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                title: task.title,\r\n                status: task.status,\r\n                ...domainModel\r\n            }\r\n            dispatch(setAppStatusAC(\"loading\"))\r\n            dispatch(changeTaskEntityStatusAC(todolistId, taskId, \"loading\"))\r\n            const res = await todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                dispatch(changeTaskEntityStatusAC(todolistId, taskId, \"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n        } finally {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        }\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    status?: TaskStatuses\r\n    description?: string\r\n    deadline?: string\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n}\r\n\r\nexport type TasksReducerActionsType =\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {appReducer, AppReducerActionsType} from \"./app-reducer\"\r\nimport {authReducer, AuthReducerActionsType} from \"../features/Login/auth-reducer\"\r\nimport {todolistsReducer, TodolistsReducerActionsType} from \"../features/TodolistsList/todolists-reducer\"\r\nimport {tasksReducer, TasksReducerActionsType} from \"../features/TodolistsList/Todolist/Task/tasks-reducer\"\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport type AppActionsType = AppReducerActionsType\r\n    | AuthReducerActionsType\r\n    | TodolistsReducerActionsType\r\n    | TasksReducerActionsType\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, useState} from \"react\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport {setAppErrorAC} from \"../../app/app-reducer\"\r\nimport {TextField} from \"@material-ui/core\"\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChangeValue: (newValue: string) => void\r\n    editableSpanInputStyle?: string\r\n    editableSpanTextStyle?: string\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(props.value)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value)\r\n    }\r\n    const activateViewMode = () => {\r\n        if (title !== \"\") {\r\n            setEditMode(false)\r\n            props.onChangeValue(title)\r\n        } else {\r\n            dispatch(setAppErrorAC(\"Сhanges not saved. Title is emply.\"))\r\n            setEditMode(false)\r\n            props.onChangeValue(props.value)\r\n        }\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField\r\n            value={title}\r\n            onChange={changeTitle}\r\n            onBlur={activateViewMode}\r\n            autoFocus\r\n            color=\"primary\"\r\n            className={props.editableSpanInputStyle}\r\n        />\r\n        : <span onDoubleClick={activateEditMode} className={props.editableSpanTextStyle}>{props.value}</span>\r\n})\r\n","import React, {ChangeEvent} from \"react\"\r\nimport style from \"./DeadlineDate.module.scss\"\r\n\r\ntype DeadlineDatePropsType = {\r\n    dateValue: string\r\n    onDateChange: (newValue: string) => void\r\n}\r\n\r\nexport const DeadlineDate = React.memo(function (props: DeadlineDatePropsType) {\r\n\r\n    const onDeadlineChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onDateChange(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type=\"date\"\r\n                value={props.dateValue}\r\n                onChange={onDeadlineChangeHandler}\r\n                className={style.taskDeadlineInput}\r\n            />\r\n\r\n        </>\r\n    )\r\n})\r\n","import React, {ChangeEvent, useState} from \"react\"\r\nimport style from \"./PrioritySelect.module.scss\"\r\n\r\ntype PrioritySelectPropsType = {\r\n    todolistId: string\r\n    priority: number\r\n    onChangePriority: (newPriority: number) => void\r\n    priorityTextStyle?: string\r\n}\r\n\r\nexport const PrioritySelect = React.memo((props: PrioritySelectPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(true)\r\n    const taskPriority = () => {\r\n        switch (props.priority) {\r\n            case 0:\r\n                return \"Low\"\r\n            case 1:\r\n                return \"Middle\"\r\n            case 2:\r\n                return \"Hight\"\r\n            case 3:\r\n                return \"Urgently\"\r\n            case 4:\r\n                return \"Later\"\r\n        }\r\n\r\n    }\r\n\r\n    const onSelectedItemChangeHandler = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        props.onChangePriority(+e.target.value)\r\n        setEditMode(true)\r\n    }\r\n\r\n    const activateEditModeClickHandler = () => {\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <span onDoubleClick={activateEditModeClickHandler}\r\n                    className={props.priorityTextStyle}\r\n                    style={{margin: \"0 0 0 12px\"}}>{taskPriority()}</span>\r\n            : <select onChange={onSelectedItemChangeHandler} name=\"priority\" className={style.taskSelect}>\r\n                <option value={0} selected>Low</option>\r\n                <option value={1}>Middle</option>\r\n                <option value={2}>Hight</option>\r\n                <option value={3}>Urgently</option>\r\n                <option value={4}>Later</option>\r\n            </select>\r\n    )\r\n})","import React from \"react\"\r\nimport moment from \"moment\"\r\nimport style from \"./CreatedDate.module.scss\"\r\n\r\ntype CreatedDatePropsType = {\r\n    createdDate: string\r\n}\r\n\r\nexport const CreatedDate = React.memo((props: CreatedDatePropsType) => {\r\n\r\n    const createdDate = (date: string) => {\r\n        return `${date.substr(3, 2)}.${date.substr(0, 2)}.${date.substr(6, 4)}`\r\n    }\r\n\r\n    return (\r\n        <span className={style.createdDateText}>\r\n            {props.createdDate\r\n                ? createdDate(moment(props.createdDate).format(\"L\"))\r\n                : null\r\n            }\r\n        </span>\r\n    )\r\n})","import React, {useCallback} from \"react\"\r\nimport {TaskType} from \"../../../../../api/todolists-api\"\r\nimport {EditableSpan} from \"../../../../../components/EditableSpan/EditableSpan\"\r\nimport {DeadlineDate} from \"./DeadlineDate/DeadlineDate\"\r\nimport {PrioritySelect} from \"./PrioritySelect/PrioritySelect\"\r\nimport {CreatedDate} from \"./CreatedDate/CreatedDate\"\r\nimport style from \"./TaskSettings.module.scss\"\r\n\r\ntype TaskSettingsPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n    changeTaskDescription: (taskId: string, newDescription: string, todolistId: string) => void\r\n    changeTaskDeadline: (taskId: string, newDeadline: string, todolistId: string) => void\r\n    changeTaskPriority: (taskId: string, newPriority: number, todolistId: string) => void\r\n}\r\n\r\nexport const TaskSettings = React.memo((props: TaskSettingsPropsType) => {\r\n\r\n    const onTaskDescriptionChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskDescription(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    const onTaskDeadlineChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskDeadline(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    const onTaskPriorityChangeHandler = useCallback((newPriority: number) => {\r\n        props.changeTaskPriority(props.task.id, newPriority, props.todolistId)\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    return (\r\n        <div className={style.taskSettingsContainer}>\r\n            <div className={style.settingsItemContainer}>\r\n                <p className={style.taskItemHelpText}>Description:</p>\r\n                <EditableSpan\r\n                    value={props.task.description}\r\n                    onChangeValue={onTaskDescriptionChangeHandler}\r\n                    editableSpanInputStyle={style.taskDescriptionEditableSpanInput}\r\n                    editableSpanTextStyle={style.itemText}\r\n                />\r\n            </div>\r\n            <div className={style.settingsItemContainer}>\r\n                <span className={style.taskItemHelpText}>Deadline:</span>\r\n                <DeadlineDate\r\n                    dateValue={props.task.deadline.substr(0, 10)}\r\n                    onDateChange={onTaskDeadlineChangeHandler}\r\n                />\r\n            </div>\r\n            <div className={style.settingsItemContainer}>\r\n                <span className={style.taskItemHelpText}>Priority:</span>\r\n                <PrioritySelect\r\n                    todolistId={props.todolistId}\r\n                    priority={props.task.priority}\r\n                    onChangePriority={onTaskPriorityChangeHandler}\r\n                    priorityTextStyle={style.itemText}\r\n                />\r\n            </div>\r\n            <div className={style.settingsItemContainer}>\r\n                <span className={style.taskItemHelpText} style={{margin: \"0 12px 0 0\"}}>Created:</span>\r\n                <CreatedDate\r\n                    createdDate={props.task.addedDate}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useCallback, useState} from \"react\"\r\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-api\"\r\nimport {TaskSettings} from \"./TaskSettings/TaskSettings\"\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\"\r\nimport {Delete} from \"@material-ui/icons\"\r\nimport {Checkbox, IconButton} from \"@material-ui/core\"\r\nimport SettingsIcon from \"@material-ui/icons/Settings\"\r\nimport style from \"./Task.module.scss\"\r\n\r\ntype TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskDescription: (taskId: string, newDescription: string, todolistId: string) => void\r\n    changeTaskDeadline: (taskId: string, newDeadline: string, todolistId: string) => void\r\n    changeTaskPriority: (taskId: string, newPriority: number, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const [settingsShowed, setSettingsShowed] = useState<boolean>(false)\r\n\r\n    const onClickSettingsButton = useCallback(() => {\r\n        setSettingsShowed(!settingsShowed)\r\n    }, [settingsShowed])\r\n\r\n    const onRemoveTaskClickHandler = useCallback(() => {\r\n        props.removeTask(props.task.id, props.todolistId)\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    const onTaskTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    const onTaskStausChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <div className={style.taskMainInfo}>\r\n                <div className={style.taskStatusAndTitle}>\r\n                    <Checkbox\r\n                        checked={props.task.status === TaskStatuses.Completed}\r\n                        onChange={onTaskStausChangeHandler}\r\n                        color=\"primary\"\r\n                        className={style.taskCheckbox}\r\n                    />\r\n                    <EditableSpan\r\n                        value={props.task.title}\r\n                        onChangeValue={onTaskTitleChangeHandler}\r\n                        editableSpanInputStyle={style.taskTitleEditableSpanInput}\r\n                        editableSpanTextStyle={style.taskTitle}\r\n                    />\r\n                </div>\r\n                <div className={style.taskButtonsContainer}>\r\n                    <IconButton onClick={onClickSettingsButton} color=\"primary\" className={style.taskButton}>\r\n                        <SettingsIcon fontSize=\"inherit\"/>\r\n                    </IconButton>\r\n                    <IconButton onClick={onRemoveTaskClickHandler}\r\n                                disabled={props.task.entityStatus === \"loading\"}\r\n                                className={style.taskButton}>\r\n                        <Delete fontSize=\"inherit\"/>\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n            {\r\n                settingsShowed\r\n                    ? <TaskSettings\r\n                        todolistId={props.todolistId}\r\n                        task={props.task}\r\n                        changeTaskDescription={props.changeTaskDescription}\r\n                        changeTaskDeadline={props.changeTaskDeadline}\r\n                        changeTaskPriority={props.changeTaskPriority}\r\n                    />\r\n                    : null\r\n            }\r\n        </div>\r\n    )\r\n})\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\"\r\nimport {IconButton, TextField} from \"@material-ui/core\"\r\nimport {AddBox} from \"@material-ui/icons\"\r\nimport style from \"./AddItemForm.module.scss\"\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n    addItemInputStyle?: string\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false, addItemInputStyle}: AddItemFormPropsType) {\r\n\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(\"\")\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.addItemContainer}>\r\n            <TextField\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                disabled={disabled}\r\n                error={!!error}\r\n                helperText={error}\r\n                label=\"Title\"\r\n                variant=\"outlined\"\r\n                className={addItemInputStyle}\r\n            />\r\n            <IconButton onClick={addItemHandler} disabled={disabled} className={style.addItemButton} color=\"primary\">\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","import React, {useCallback} from \"react\"\r\nimport {TaskType} from \"../../../../api/todolists-api\"\r\nimport style from \"./ProgressBar.module.scss\"\r\n//@ts-ignore\r\nimport {CircleProgress} from \"react-gradient-progress\"\r\n\r\ntype ProgressBarPropsType = {\r\n    tasks: Array<TaskType>\r\n}\r\n\r\nexport const ProgressBar = React.memo(function (props: ProgressBarPropsType) {\r\n\r\n    const countPercentValue = useCallback((tasks: Array<TaskType>) => {\r\n        let countCompletedTasks: number = 0\r\n        tasks.forEach(item => {\r\n            if (item.status === 2) {\r\n                countCompletedTasks++\r\n            }\r\n        })\r\n        return Math.round((countCompletedTasks * 100) / props.tasks.length)\r\n    }, [props.tasks])\r\n\r\n    return (\r\n        isNaN(countPercentValue(props.tasks))\r\n            ? null\r\n            : <div className={style.progressContainer}>\r\n                <span className={style.progressHelpText}>Progress (Completed):</span>\r\n                <div className={style.circleProgressContainer}>\r\n                    <CircleProgress\r\n                        percentage={countPercentValue(props.tasks)}\r\n                        primaryColor={[\"#0085eb\", \"#dfe5ff\"]}\r\n                        secondaryColor={'#FFE5FF'}\r\n                        strokeWidth={5}\r\n                        width={70}\r\n                    />\r\n                </div>\r\n            </div>\r\n    )\r\n})\r\n","import React, {useCallback, useEffect} from \"react\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport moment from \"moment\"\r\nimport {FilterValuesType, TodolistDomainType} from \"../todolists-reducer\"\r\nimport {fetchTasksTC} from \"./Task/tasks-reducer\"\r\nimport {TaskStatuses, TaskType} from \"../../../api/todolists-api\"\r\nimport {Task} from \"./Task/Task\"\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\"\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\"\r\nimport {ProgressBar} from \"./ProgressBar/ProgressBar\"\r\nimport {Button, ButtonGroup, IconButton} from \"@material-ui/core\"\r\nimport {Delete} from \"@material-ui/icons\"\r\nimport style from \"./Todolist.module.scss\"\r\n\r\ntype TodolistPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskDescription: (taskId: string, newDescription: string, todolistId: string) => void\r\n    changeTaskDeadline: (taskId: string, newDeadline: string, todolistId: string) => void\r\n    changeTaskPriority: (taskId: string, newPriority: number, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: TodolistPropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [demo, dispatch, props.todolist.id])\r\n\r\n    const onAddTaskClickHandler = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const onRemoveTodolistClickHandler = useCallback(() => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }, [props.removeTodolist, props.todolist.id])\r\n\r\n    const onChangeTodolistTitleClickHandler = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <div className={style.todolistBlock}>\r\n            <div className={style.todolistContainer}>\r\n                <div className={style.todolistTitleContainer}>\r\n                    <EditableSpan\r\n                        value={props.todolist.title}\r\n                        onChangeValue={onChangeTodolistTitleClickHandler}\r\n                        editableSpanInputStyle={style.todolistTitleEditableSpanInput}\r\n                        editableSpanTextStyle={style.todolistTitle}\r\n                    />\r\n                    <div className={style.todolistDisplay}>\r\n                        <span>{props.todolist.addedDate ? moment(props.todolist.addedDate).format(\"L\") : null}</span>\r\n                        <IconButton\r\n                            onClick={onRemoveTodolistClickHandler}\r\n                            disabled={props.todolist.entityStatus === \"loading\"}\r\n                            className={style.todolistDeleteButton}>\r\n                            <Delete fontSize=\"inherit\"/>\r\n                        </IconButton>\r\n                    </div>\r\n                </div>\r\n                <AddItemForm\r\n                    addItem={onAddTaskClickHandler}\r\n                    disabled={props.todolist.entityStatus === \"loading\"}\r\n                    addItemInputStyle={style.todolistInput}\r\n                />\r\n                <div>\r\n                    {tasksForTodolist.map(t =>\r\n                        <Task\r\n                            key={t.id}\r\n                            todolistId={props.todolist.id}\r\n                            task={t}\r\n                            removeTask={props.removeTask}\r\n                            changeTaskTitle={props.changeTaskTitle}\r\n                            changeTaskStatus={props.changeTaskStatus}\r\n                            changeTaskDescription={props.changeTaskDescription}\r\n                            changeTaskDeadline={props.changeTaskDeadline}\r\n                            changeTaskPriority={props.changeTaskPriority}\r\n\r\n                        />)\r\n                    }\r\n                </div>\r\n                <div className={style.todolistFilterContainer}>\r\n                    <ButtonGroup color={\"primary\"}\r\n                                 className={style.buttonGroupContainer}>\r\n                        <Button variant={props.todolist.filter === \"all\" ? \"contained\" : \"outlined\"}\r\n                                onClick={onAllClickHandler}\r\n                                color={\"default\"}\r\n                                className={style.buttonFilter}>All\r\n                        </Button>\r\n                        <Button variant={props.todolist.filter === \"active\" ? \"contained\" : \"outlined\"}\r\n                                onClick={onActiveClickHandler}\r\n                                color={\"primary\"}\r\n                                className={style.buttonFilter}>Active\r\n                        </Button>\r\n                        <Button variant={props.todolist.filter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                                onClick={onCompletedClickHandler}\r\n                                color={\"secondary\"}\r\n                                className={style.buttonFilter}>Completed\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </div>\r\n                <ProgressBar tasks={props.tasks}/>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {AppRootStateType} from \"../../app/store\"\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\"\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"./Todolist/Task/tasks-reducer\"\r\nimport {TaskStatuses} from \"../../api/todolists-api\"\r\nimport {Todolist} from \"./Todolist/Todolist\"\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\"\r\nimport Particles from \"react-particles-js\"\r\nimport Masonry from \"react-masonry-css\"\r\nimport style from \"./TodolistsList.module.scss\"\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = ({demo = false}) => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [demo, isLoggedIn, dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(title, todolistId))\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTaskTC(id, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTC(id, {title: newTitle}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskTC(id, {status}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskDescription = useCallback(function (id: string, newDescription: string, todolistId: string) {\r\n        dispatch(updateTaskTC(id, {description: newDescription}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskDeadline = useCallback(function (id: string, newDeadline: string, todolistId: string) {\r\n        dispatch(updateTaskTC(id, {deadline: newDeadline}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskPriority = useCallback(function (id: string, newPriority: number, todolistId: string) {\r\n        dispatch(updateTaskTC(id, {priority: newPriority}, todolistId))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(removeTodolistTC(id))\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodolistTitleTC(id, title))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        dispatch(changeTodolistFilterAC(todolistId, value))\r\n    }, [dispatch])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    const particlesOptions = {\r\n        \"particles\": {\r\n            \"number\": {\"value\": 80, \"density\": {\"enable\": true, \"value_area\": 800}},\r\n            \"color\": {\"value\": \"#0085eb\"},\r\n            \"shape\": {\r\n                \"type\": \"circle\",\r\n                \"stroke\": {\"width\": 0, \"color\": \"#000000\"},\r\n                \"polygon\": {\"nb_sides\": 5}\r\n            },\r\n            \"opacity\": {\r\n                \"value\": 0.5,\r\n                \"random\": false,\r\n                \"anim\": {\"enable\": false, \"speed\": 1, \"opacity_min\": 0.1, \"sync\": false}\r\n            },\r\n            \"size\": {\r\n                \"value\": 10,\r\n                \"random\": true,\r\n                \"anim\": {\"enable\": false, \"speed\": 40, \"size_min\": 0.1, \"sync\": false}\r\n            },\r\n            \"line_linked\": {\"enable\": true, \"distance\": 150, \"color\": \"#0085eb\", \"opacity\": 0.4, \"width\": 1},\r\n            \"move\": {\r\n                \"enable\": true,\r\n                \"speed\": 0.4,\r\n                \"random\": false,\r\n                \"straight\": false,\r\n                \"bounce\": false,\r\n                \"attract\": {\"enable\": false, \"rotateX\": 600, \"rotateY\": 1200}\r\n            }\r\n        }\r\n    }\r\n\r\n    const breakpointColumnsObj = {\r\n        default: 4,\r\n        1300: 3,\r\n        1000: 2,\r\n        680: 1\r\n    }\r\n\r\n    return (\r\n        <div className={style.todolistsListBlock}>\r\n            <Particles params={particlesOptions} className={style.particles}/>\r\n            <div data-aos=\"fade-right\" data-aos-duration=\"600\" className={style.todolistsListInputContainer}>\r\n                <AddItemForm\r\n                    addItem={addTodolist}\r\n                    addItemInputStyle={style.todolistsListInput}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Masonry\r\n                    breakpointCols={breakpointColumnsObj}\r\n                    columnClassName={style.todolistColumnItem}\r\n                    className={style.todolistslits}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id]\r\n                            return (\r\n                                <Todolist\r\n                                    key={tl.id}\r\n                                    todolist={tl}\r\n                                    tasks={allTodolistTasks}\r\n                                    addTask={addTask}\r\n                                    removeTask={removeTask}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    changeTaskDescription={changeTaskDescription}\r\n                                    changeTaskDeadline={changeTaskDeadline}\r\n                                    changeTaskPriority={changeTaskPriority}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                    changeFilter={changeFilter}\r\n                                    demo={demo}\r\n                                />\r\n                            )\r\n                        })\r\n                    }\r\n                </Masonry>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/todolist.7517dddc.png\";","import React from \"react\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {AppRootStateType} from \"../../app/store\"\r\nimport {useFormik} from \"formik\"\r\nimport {loginTC} from \"./auth-reducer\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {Checkbox, FormControl, FormControlLabel, TextField, Button, Grid} from \"@material-ui/core\"\r\nimport projectImage from \"./../../assets/images/todolist.png\"\r\nimport style from \"./Login.module.scss\"\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = React.memo(function () {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = \"Required.\"\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address.\"\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Required.\"\r\n            } else if (values.password.length < 6) {\r\n                errors.password = \"Password must be more than six characters.\"\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.loginContainer}>\r\n            <div className={style.welcomeTextContainer}>\r\n                <h3>Welcome to Task Tracker application</h3>\r\n            </div>\r\n            <div className={style.loginContent}>\r\n                <div data-aos=\"zoom-in\" data-aos-duration=\"600\" className={style.projectContainer}>\r\n                    <div className={style.projectImageContainer}\r\n                         style={{backgroundImage: `url(${projectImage})`}}></div>\r\n                    <div className={style.projectBody}>\r\n                        <div className={style.projectInfo}>\r\n                            <h3 className={style.projectHelpText}>Task Tracker help you to:</h3>\r\n                            <ul className={style.projectList}>\r\n                                <li>Structure information about all current tasks in one place;</li>\r\n                                <li>Set description, deadline and filtres for your tasks;</li>\r\n                                <li>Set a deadline for completed tasks;</li>\r\n                                <li>Display the percentage of completed tasks;</li>\r\n                                <li>Manage and control tasks with user interface;</li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <Grid data-aos=\"zoom-in\" data-aos-duration=\"600\" className={style.authContainer} container>\r\n                    <form onSubmit={formik.handleSubmit} className={style.authForm}>\r\n                        <FormControl className={style.authFormControl}>\r\n                            <div className={style.authTextContainer}>\r\n                                <h3>Authorization</h3>\r\n                            </div>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                label=\"Email\"\r\n                                {...formik.getFieldProps(\"email\")}\r\n                            />\r\n                            {\r\n                                formik.touched.email && formik.errors.email\r\n                                    ? <div className={style.authErrorText}>{formik.errors.email}</div>\r\n                                    : <div className={style.authErrorText}></div>\r\n                            }\r\n                            <TextField\r\n                                type=\"password\"\r\n                                variant=\"outlined\"\r\n                                label=\"Password\"\r\n                                {...formik.getFieldProps(\"password\")}\r\n                            />\r\n                            {\r\n                                formik.touched.password && formik.errors.password\r\n                                    ? <div className={style.authErrorText}>{formik.errors.password}</div>\r\n                                    : <div className={style.authErrorText}></div>\r\n                            }\r\n                            <FormControlLabel\r\n                                label={\"Remember me\"}\r\n                                className={style.authRememberMeText}\r\n                                control={\r\n                                    <Checkbox\r\n                                        {...formik.getFieldProps(\"rememberMe\")}\r\n                                    />}\r\n                            />\r\n                            <Button type={\"submit\"} variant={\"contained\"} className={style.authButton}>Login</Button>\r\n                        </FormControl>\r\n                    </form>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","import React from \"react\"\r\nimport style from \"./PageNotFound.module.scss\"\r\n\r\nexport const PageNotFound = React.memo(() => {\r\n    return (\r\n        <div className={style.pageNotFoundBlock}>\r\n            <p>Something wrong...</p>\r\n            <p>404: PAGE NOT FOUND!</p>\r\n        </div>\r\n    )\r\n})","export default __webpack_public_path__ + \"static/media/primaryLogo.9d6a70d6.png\";","import React from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppRootStateType} from \"../../app/store\"\r\nimport {RequestStatusType} from \"../../app/app-reducer\"\r\nimport {logoutTC} from \"../../features/Login/auth-reducer\"\r\nimport {AppBar, Button, LinearProgress, Toolbar, Typography} from \"@material-ui/core\"\r\nimport headerLogoImg from \"../../assets/images/primaryLogo.png\"\r\nimport style from \"../Header/Header.module.scss\"\r\n\r\nexport function Header() {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const email = useSelector<AppRootStateType, string>(state => state.auth.email)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const loguotHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar data-aos='zoom-in-right' data-aos-duration=\"800\" className={style.header}>\r\n                    <a href='/' className={style.linkHeaderLogo}>\r\n                        <div className={style.headerLogoContainer}>\r\n                            <div className={style.headerLogo}>\r\n                                <img src={headerLogoImg} alt={\"LogoImage\"} className={style.headerLogoImg}/>\r\n                            </div>\r\n                            <Typography className={style.headerLogoText}>\r\n                                Task Tracker\r\n                            </Typography>\r\n                        </div>\r\n                    </a>\r\n                    {\r\n                        isLoggedIn\r\n                            ?\r\n                            <div className={style.headerDisplay}>\r\n                                <div className={style.headerUserInfo}>\r\n                                    <span className={style.headerUserText}>User:</span>\r\n                                    <span className={style.headerEmailText}>{email}</span>\r\n                                </div>\r\n                                <div>\r\n                                    <Button onClick={loguotHandler} className={style.headerButton}>Sign out</Button>\r\n                                </div>\r\n                            </div>\r\n                            :\r\n                            <div className={style.headerDisplay}>\r\n                                <div>\r\n                                    <Button href={\"https://social-network.samuraijs.com/signUp\"}\r\n                                            className={style.headerButton}>\r\n                                        Sign up\r\n                                    </Button>\r\n                                </div>\r\n                            </div>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === \"loading\" ? <LinearProgress/> : <div style={{height: '4px'}}/>}\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {AppRootStateType} from \"../../app/store\"\r\nimport {setAppErrorAC} from \"../../app/app-reducer\"\r\nimport Snackbar from \"@material-ui/core/Snackbar\"\r\nimport MuiAlert, {AlertProps} from \"@material-ui/lab/Alert\"\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === \"clickaway\") {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React, {useEffect} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {Redirect, Route, Switch} from \"react-router-dom\"\r\nimport {AppRootStateType} from \"./store\"\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\"\r\nimport {Login} from \"../features/Login/Login\"\r\nimport {PageNotFound} from \"./PageNotFound/PageNotFound\"\r\nimport {Header} from \"../components/Header/Header\"\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\"\r\nimport {initializeAppTC} from \"./app-reducer\"\r\nimport {CircularProgress} from \"@material-ui/core\"\r\nimport style from \"./App.module.scss\"\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport function App({demo = false}: PropsType) {\r\n\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div style={{position: \"fixed\", top: \"50%\", textAlign: \"center\", width: \"100%\"}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorSnackbar/>\r\n            <Header/>\r\n            <section className={style.mainBlock}>\r\n                <Switch>\r\n                    <Route exact path={\"/\"} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={\"/login\"} render={() => <Login/>}/>\r\n                    <Route path={\"/404\"} render={() => <PageNotFound/>}/>\r\n                    <Redirect from={\"*\"} to={\"/404\"}/>\r\n                </Switch>\r\n            </section>\r\n        </>\r\n    )\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport {HashRouter} from \"react-router-dom\"\r\nimport {Provider} from \"react-redux\"\r\nimport {store} from \"./app/store\"\r\nimport {App} from \"./app/App\"\r\nimport reportWebVitals from \"./reportWebVitals\"\r\nimport \"./index.css\"\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskMainInfo\":\"Task_taskMainInfo__FU2Dl\",\"taskStatusAndTitle\":\"Task_taskStatusAndTitle__15hcV\",\"taskCheckbox\":\"Task_taskCheckbox__3YrSc\",\"taskTitleEditableSpanInput\":\"Task_taskTitleEditableSpanInput__3xAT1\",\"taskTitle\":\"Task_taskTitle__An8-Q\",\"taskButtonsContainer\":\"Task_taskButtonsContainer__j2ch1\",\"taskButton\":\"Task_taskButton__3LEgM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistsListBlock\":\"TodolistsList_todolistsListBlock__1y44T\",\"particles\":\"TodolistsList_particles__GqiDA\",\"todolistsListInputContainer\":\"TodolistsList_todolistsListInputContainer__1puFA\",\"todolistsListInput\":\"TodolistsList_todolistsListInput__3bc-X\",\"todolistslits\":\"TodolistsList_todolistslits__3XW6X\",\"todolistColumnItem\":\"TodolistsList_todolistColumnItem__3NGKB\"};"],"sourceRoot":""}